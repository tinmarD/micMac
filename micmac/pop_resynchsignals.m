function [VI, ALLWIN, ALLSIG] = pop_resynchsignals (VI, ALLWIN, ALLSIG)
%[VI, ALLWIN, ALLSIG] = POP_RESYNCHSIGNALS (VI, ALLWIN, ALLSIG)
%   Given 2 micMac signals, try to find the time offset between the 2 if
%   they are not synchronized. For instance, a Macro-electrode signal
%   with a micro-electrode signal recorded on two seperated systems.
%
%   The re-synch signal can be added if asked

[allSigs,~,~,~,rawsigdesc] = getsignal (ALLSIG,'type','continuous');
if isempty(allSigs)
    msgbox ('No signal loaded');
    return;
end
if length(allSigs) < 2
    msgbox ('At least 2 signals must be loaded');
    return;
end    

cb_winchanged = [
    'winstr = get(findobj(gcbf,''tag'',''winsel''),''String'');',...
    'winsel = winstr{get(findobj(gcbf,''tag'',''winsel''),''Value'')};',...
    'newpossel = (length(ALLWIN(str2double(winsel)).views)+1);',...                    
    'set(findobj(gcbf,''tag'',''possel''),''String'',num2str(newpossel));'];

cb_sig_1_changed       = [
    'allSigs        = getsignal(ALLSIG,''type'',''continuous'');',...
    'sig1ind        = get(findobj(gcbf,''tag'',''allsigs1''),''value'');',...
    'sig2ind        = get(findobj(gcbf,''tag'',''allsigs2''),''value'');',...
    'channames1     = allSigs(sig1ind).channamesnoeeg;',...
    'set(findobj(gcbf,''tag'',''channames1''),''String'',channames1);',...
    'set(findobj(gcbf,''tag'',''srateedit''),''String'',num2str(min(allSigs(sig1ind).srate,allSigs(sig2ind).srate)));',...
    ];

cb_sig_2_changed       = [
    'allSigs        = getsignal(ALLSIG,''type'',''continuous'');',...
    'sig2ind        = get(findobj(gcbf,''tag'',''allsigs2''),''value'');',....
    'sig1ind        = get(findobj(gcbf,''tag'',''allsigs1''),''value'');',...
    'channames2     = allSigs(sig2ind).channamesnoeeg;',...
    'set(findobj(gcbf,''tag'',''channames2''),''String'',channames2);',...
    'set(findobj(gcbf,''tag'',''srateedit''),''String'',num2str(min(allSigs(sig1ind).srate,allSigs(sig2ind).srate)));',...
    ];

cb_runanalysis = [
    'allSigs        = getsignal(ALLSIG,''type'',''continuous'');',...
    'sig1ind        = get(findobj(gcbf,''tag'',''allsigs1''),''value'');',...
    'sig2ind        = get(findobj(gcbf,''tag'',''allsigs2''),''value'');',...
    'chan1pos       = get(findobj(gcbf,''tag'',''channames1''),''value'');',...
    'chan2pos       = get(findobj(gcbf,''tag'',''channames2''),''value'');',...
    'tmin           = str2double(get(findobj(gcbf,''tag'',''tminedit''),''String''));',...
    'tmax           = str2double(get(findobj(gcbf,''tag'',''tmaxedit''),''String''));',...
    'maxlag         = str2double(get(findobj(gcbf,''tag'',''maxlagedit''),''String''));',...
    'resamplefreq   = str2double(get(findobj(gcbf,''tag'',''srateedit''),''String''));',...
    'if isnan(tmin) || isnan(tmax);',...
    'msgbox(''Wrong time interval'');return;',...
    'end;',...
    'if isnan(maxlag); maxlag=tmax-tmin; end;',...
    'maxlag=abs(maxlag);',...
    'if isnan(resamplefreq); resamplefreq=min(allSigs(sig1ind),allSigs(sig2ind));end;',...
    '[toffset, ~, ~] = resynchsignals(allSigs(sig1ind),allSigs(sig2ind),chan1pos,chan2pos,min(tmin,tmax),max(tmax,tmin),maxlag,resamplefreq,NaN,'''');',...
    'if ~isnan(toffset)',...
    'msgbox([''Found a time offset of '',num2str(toffset),'' seconds between signal A and signal B'']);',...
    'end',...
    ];

cb_timeinterval_changed = [
    'tmin           = str2double(get(findobj(gcbf,''tag'',''tminedit''),''String''));',...
    'tmax           = str2double(get(findobj(gcbf,''tag'',''tmaxedit''),''String''));',...
    'if isnan(tmin) || isnan(tmax);',...
    'set(findobj(gcbf,''tag'',''maxlagedit''),''String'','''');',...
    'else;',...
    'set(findobj(gcbf,''tag'',''maxlagedit''),''String'',num2str(tmax-tmin));',...
    'end;',...
    ];

windowsnb   = cell(1,VI.nwin);
position    = length(ALLWIN(end).views)+1;
for w=1:VI.nwin; windowsnb{w}=w; end;

if isempty(ALLWIN(1).views)
    tmin = 0;
    tmax = min([10,ALLSIG(1).tmax, ALLSIG(2).tmax]);
else
    tmin = ALLWIN(1).ctimet - 0.5*ALLWIN(1).obstimet;
    tmax = ALLWIN(1).ctimet + 0.5*ALLWIN(1).obstimet;
end

strategies = {'Cut ahead signal', 'Add a blank signal'};
strategies_short = {'Cut','AddBlank'};

geometry = {[1,1],[1,1],[1,1],[1,1],[2,1,1],[1,1],[1,1],[1],[1,1,1],[1],[1,1],[1,1],[1],[1,1],[1,1,1,1]};
uilist   = {...
    {'Style','text','String','Signal A :'},...
    {'Style','popupmenu','String',rawsigdesc,'tag','allsigs1','Callback',cb_sig_1_changed},...
    {'Style','text','String','Signal B :'},...
    {'Style','popupmenu','String',rawsigdesc,'value',2,'tag','allsigs2','Callback',cb_sig_2_changed},...
    {'Style','text','String','Channel names A:'},...
    {'Style','popupmenu','String',allSigs(1).channamesnoeeg,'tag','channames1'},...
    {'Style','text','String','Channel names B:'},...
    {'Style','popupmenu','String',allSigs(2).channamesnoeeg,'tag','channames2'},... 
    {'Style','text','String','Time window (s) : '},...
    {'Style','edit','String',num2str(tmin),'tag','tminedit','callback',cb_timeinterval_changed},...
    {'Style','edit','String',num2str(tmax),'tag','tmaxedit','callback',cb_timeinterval_changed},....
    {'Style','text','String','Max lag (s) :'},...
    {'Style','edit','String',num2str(tmax-tmin),'tag','maxlagedit'},...
    {'Style','text','String','Resampling freq. (Hz) :'},...
    {'Style','edit','String', min([ALLSIG(1:2).srate]),'tag','srateedit'},...
    {},...
    {},{'Style','pushbutton','String','Run Analysis','Callback',cb_runanalysis},{},...
    {},...
    {'Style','text','String','Known time offset :'},...
    {'Style','edit','String',''},...
    {'Style','text','String','Strategy :'},...
    {'Style','popupmenu','String',strategies},...
    {},...
    {'Style','text','String','Add view'},...
    {'Style','checkbox','Value',0},...
    {'Style','text','String','Window'},...
    {'Style','popupmenu','String',windowsnb,'Value',length(windowsnb),'tag','winsel','Callback',cb_winchanged},...
    {'Style','text','String','Position'},...
    {'Style','edit','String',num2str(position),'tag','possel'}
};

[results, ~] = inputgui (geometry, uilist, 'title', 'Re-synch Signals');

if ~isempty(results)
    sigAind     = results{1};
    sigBind     = results{2};
    SigA        = ALLSIG(sigAind);
    SigB        = ALLSIG(sigBind);
    chanApos    = results{3};
    chanBpos    = results{4};
    tmin        = str2double(results{5});
    tmax        = str2double(results{6});
    maxlag      = str2double(results{7});
    resamplefreq= str2double(results{8});
    toffset     = str2double(results{9});
    strategy    = strategies_short(results{10});
    if SigA.id == SigB.id
        msgbox('Signal A and B are the same');
        return
    end
    if isnan(tmin) || isnan(tmax)
        msgbox('Wrong time interval');
        return;
    end
    if isnan(maxlag)
        maxlag = tmax - tmin;
    end
    maxlag = abs(maxlag);
    if isnan(resamplefreq) || resamplefreq < 0
        resamplefreq = min(SigA.srate, SigB.srate);
    end
    [toffset, SigAsynch, SigBsynch] = resynchsignals(SigA, SigB, chanApos, chanBpos, ...
        min(tmin,tmax),max(tmax,tmin), maxlag, resamplefreq, toffset, strategy);
    if isnan(toffset)
        msgbox('Could not find the time offset between signal A and signal B');
    end
    % Add the synched signal (recognized with the 'sync' in its desc field
    if regexp(SigAsynch.desc,'sync')  
        [VI, ALLWIN, ALLSIG, sigid] = addsignal(VI, ALLWIN, ALLSIG, SigAsynch.data, SigAsynch.channames,...
            SigAsynch.srate, SigAsynch.type, SigAsynch.tmin, SigAsynch.tmax, SigAsynch.filename,...
            SigAsynch.filepath, SigAsynch.montage, SigAsynch.desc, SigAsynch.israw,...
            SigAsynch.parent, SigAsynch.badchannelpos, SigAsynch.badepochpos);
        % Add a view if asked 
        if results{11}
            [VI, ALLWIN, ALLSIG] = addview (VI, ALLWIN, ALLSIG, results{12},sigid,'t',str2double(results{13}));
        end
    elseif regexp(SigBsynch.desc,'sync')  
        [VI, ALLWIN, ALLSIG, sigid] = addsignal(VI, ALLWIN, ALLSIG, SigBsynch.data, SigBsynch.channames,...
                    SigBsynch.srate, SigBsynch.type, SigBsynch.tmin, SigBsynch.tmax, SigBsynch.filename,...
                    SigBsynch.filepath, SigBsynch.montage, SigBsynch.desc, SigBsynch.israw,...
                    SigBsynch.parent, SigBsynch.badchannelpos, SigBsynch.badepochpos);
        % Add synched signal
        if results{11}
            [VI, ALLWIN, ALLSIG] = addview (VI, ALLWIN, ALLSIG, results{12},sigid,'t',str2double(results{13}));
        end
    else
        msgbox('Signal A and B are in synch');
        return;
    end
end

end

